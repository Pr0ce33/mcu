C51 COMPILER V9.60.0.0   LAB5                                                              04/25/2024 13:49:48 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE LAB5
OBJECT MODULE PLACED IN .\Objects\lab5.obj
COMPILER INVOKED BY: D:\SDK\Keil_v5\C51\BIN\C51.EXE lab5.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -lab5.lst) OBJECT(.\Objects\lab5.obj)

line level    source

   1          #include <reg52.h>
   2          sbit ADDR0 = P1 ^ 0;
   3          sbit ADDR1 = P1 ^ 1;
   4          sbit ADDR2 = P1 ^ 2;
   5          sbit ADDR3 = P1 ^ 3;
   6          sbit ENLED = P1 ^ 4;
   7          unsigned char code LedChar[] = { // 数码管显示字符转换表
   8              0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8,
   9              0x80, 0x90, 0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8E};
  10          unsigned char LedBuff[6] = { // 数码管显示缓冲区，初值 0xFF 确保启动时都不亮
  11              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
  12          unsigned char i = 0;      // 动态扫描的索引
  13          unsigned int cnt = 0;     // 记录 T0 中断次数
  14          unsigned char flag1s = 0; // 1 秒定时标志
  15          void main()
  16          {
  17   1          unsigned long sec = 0; // 记录经过的秒数
  18   1          EA = 1;                // 使能总中断
  19   1          ENLED = 0;             // 使能 U3，选择控制数码管
  20   1          ADDR3 = 1;             // 因为需要动态改变 ADDR0-2 的值，所以不需要再初始化了
  21   1          TMOD = 0x01;           // 设置 T0 为模式 1
  22   1          TH0 = 0xFC;            // 为 T0 赋初值 0xFC67，定时 1ms
  23   1          TL0 = 0x67;
  24   1          ET0 = 1; // 使能 T0 中断
  25   1          TR0 = 1; // 启动 T0
  26   1          while (1)
  27   1          {
  28   2              if (flag1s == 1) // 判断 1 秒定时标志
  29   2              {
  30   3                  flag1s = 0; // 1 秒定时标志清零
  31   3                  sec++;      // 秒计数自加 1
  32   3                  // 以下代码将 sec 按十进制位从低到高依次提取并转为数码管显示字符
  33   3                  LedBuff[0] = LedChar[sec % 10];
  34   3                  LedBuff[1] = LedChar[sec / 10 % 10];
  35   3                  LedBuff[2] = LedChar[sec / 100 % 10];
  36   3                  LedBuff[3] = LedChar[sec / 1000 % 10];
  37   3                  LedBuff[4] = LedChar[sec / 10000 % 10];
  38   3                  LedBuff[5] = LedChar[sec / 100000 % 10];
  39   3              }
  40   2          }
  41   1      }
  42          /* 定时器 0 中断服务函数 */
  43          void InterruptTimer0() interrupt 1
  44          {
  45   1          TH0 = 0xFC; // 重新加载初值
  46   1          TL0 = 0x67;
  47   1          cnt++;           // 中断次数计数值加 1
  48   1          if (cnt >= 1000) // 中断 1000 次即 1 秒
  49   1          {
  50   2              cnt = 0;    // 清零计数值以重新开始下 1 秒计时
  51   2              flag1s = 1; // 设置 1 秒定时标志为 1
  52   2          }
  53   1          // 以下代码完成数码管动态扫描刷新
  54   1          P0 = 0xFF; // 显示消隐
C51 COMPILER V9.60.0.0   LAB5                                                              04/25/2024 13:49:48 PAGE 2   

  55   1          switch (i)
  56   1          {
  57   2      
  58   2          case 0:
  59   2              ADDR2 = 0;
  60   2              ADDR1 = 0;
  61   2              ADDR0 = 0;
  62   2              i++;
  63   2              P0 = LedBuff[0];
  64   2              break;
  65   2          case 1:
  66   2              ADDR2 = 0;
  67   2              ADDR1 = 0;
  68   2              ADDR0 = 1;
  69   2              i++;
  70   2              P0 = LedBuff[1];
  71   2              break;
  72   2          case 2:
  73   2              ADDR2 = 0;
  74   2              ADDR1 = 1;
  75   2              ADDR0 = 0;
  76   2              i++;
  77   2              P0 = LedBuff[2];
  78   2              break;
  79   2          case 3:
  80   2              ADDR2 = 0;
  81   2              ADDR1 = 1;
  82   2              ADDR0 = 1;
  83   2              i++;
  84   2              P0 = LedBuff[3];
  85   2              break;
  86   2          case 4:
  87   2              ADDR2 = 1;
  88   2              ADDR1 = 0;
  89   2              ADDR0 = 0;
  90   2              i++;
  91   2              P0 = LedBuff[4];
  92   2              break;
  93   2          case 5:
  94   2              ADDR2 = 1;
  95   2              ADDR1 = 0;
  96   2              ADDR0 = 1;
  97   2              i = 0;
  98   2              P0 = LedBuff[5];
  99   2              break;
 100   2          default:
 101   2              break;
 102   2          }
 103   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    437    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     10       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
